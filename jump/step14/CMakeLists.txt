
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)

SET(PROJECT_NAME step14)

PROJECT(${PROJECT_NAME})

FIND_PATH(WARNING2ERROR_PATH warning2error.cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/../
    ${CMAKE_CURRENT_SOURCE_DIR}/../../
)
INCLUDE(${WARNING2ERROR_PATH}/warning2error.cmake)

INCLUDE(CheckTypeSize)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckCSourceCompiles)

MACRO (ADD_HEADER_DEFINITION FILE DEF)
    SET(DEF_NAME ${DEF})
    CHECK_INCLUDE_FILE(${FILE} ${DEF})
    IF (${DEF})
        ADD_DEFINITIONS(-D${DEF_NAME})
    ENDIF ()
ENDMACRO ()

ADD_HEADER_DEFINITION(arpa/inet.h HAVE_ARPA_INET_H)

ADD_HEADER_DEFINITION(linux/if.h HAVE_LINUX_IF_H)
ADD_HEADER_DEFINITION(linux/if_tun.h HAVE_LINUX_IF_TUN_H)
ADD_HEADER_DEFINITION(linux/tcp.h HAVE_LINUX_TCP_H)

ADD_HEADER_DEFINITION(sys/ioctl.h HAVE_SYS_IOCTL_H)
ADD_HEADER_DEFINITION(sys/socket.h HAVE_SYS_SOCKET_H)
ADD_HEADER_DEFINITION(sys/time.h HAVE_SYS_TIME_H)

ADD_HEADER_DEFINITION(netinet/tcp.h HAVE_NETINET_TCP_H)

ADD_HEADER_DEFINITION(byteswap.h HAVE_BYTESWAP_H)
ADD_HEADER_DEFINITION(execinfo.h HAVE_EXECINFO_H)
ADD_HEADER_DEFINITION(getopt.h HAVE_GETOPT_H)
ADD_HEADER_DEFINITION(io.h HAVE_IO_H)
ADD_HEADER_DEFINITION(netdb.h HAVE_NETDB_H)
ADD_HEADER_DEFINITION(syslog.h HAVE_SYSLOG_H)
ADD_HEADER_DEFINITION(unistd.h HAVE_UNISTD_H)

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/source.cmake)

SET(THIRDPARTY_PATH "${CMAKE_CURRENT_LIST_DIR}/../../3rdParty")
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/zlib.cmake)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/openssl.cmake)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/lua.cmake)

INCLUDE_DIRECTORIES(
    ${OPENSSL_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIR}
    ${LUA_INCLUDE_DIR}
)

IF (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    ADD_DEFINITIONS(-DOPENSSL_NO_ASM) # fix for clang build
ENDIF (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")

ADD_EXECUTABLE(${PROJECT_NAME} ${OPENSSL_SOURCES} ${ZLIB_SOURCES} ${LUA_SOURCES} ${SOURCE})

SET(LIBRARIES)

IF (WIN32)
    INCLUDE_DIRECTORIES(${QTUN_SOURCE_DIR}/3rdParty)
    LIST(APPEND LIBRARIES
        "WSock32"
        "IPHlpApi"
        "Mprapi"
    )
ELSE ()
    LIST(APPEND LIBRARIES
        "m"
    )
ENDIF ()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBRARIES})
